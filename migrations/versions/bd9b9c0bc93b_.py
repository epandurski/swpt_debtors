"""empty message

Revision ID: bd9b9c0bc93b
Revises: 8d09bea9c7d1
Create Date: 2020-12-04 14:12:40.830986

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'bd9b9c0bc93b'
down_revision = '8d09bea9c7d1'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('configure_account_signal',
    sa.Column('inserted_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('seqnum', sa.Integer(), nullable=False),
    sa.Column('config', sa.String(), nullable=False),
    sa.Column('config_flags', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('debtor_id', 'ts', 'seqnum')
    )
    op.create_table('debtor',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('status_flags', sa.SmallInteger(), nullable=False, comment="Debtor's status bits: 1 - is activated, 2 - is deactivated."),
    sa.Column('reservation_id', sa.BigInteger(), server_default=sa.text("nextval('debtor_reservation_id_seq')"), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('last_config_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('last_config_seqnum', sa.Integer(), nullable=False),
    sa.Column('balance', sa.BigInteger(), nullable=False),
    sa.Column('interest_rate', sa.REAL(), nullable=False),
    sa.Column('debtor_info_iri', sa.String(), nullable=True),
    sa.Column('debtor_info_content_type', sa.String(), nullable=True),
    sa.Column('debtor_info_sha256', sa.LargeBinary(), nullable=True),
    sa.Column('running_transfers_count', sa.Integer(), nullable=False),
    sa.Column('actions_count', sa.Integer(), nullable=False),
    sa.Column('actions_count_reset_date', sa.DATE(), nullable=False),
    sa.Column('deactivated_at', sa.TIMESTAMP(timezone=True), nullable=True, comment='The moment at which the debtor was deactivated. When a debtor gets deactivated, all its belonging objects (transfers, etc.) are removed. To be deactivated, the debtor must be activated first. Once deactivated, a debtor stays deactivated until it is deleted.'),
    sa.Column('has_server_account', sa.BOOLEAN(), nullable=False),
    sa.Column('account_creation_date', sa.DATE(), nullable=False),
    sa.Column('account_last_change_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('account_last_change_seqnum', sa.Integer(), nullable=False),
    sa.Column('account_last_heartbeat_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('account_id', sa.String(), nullable=False),
    sa.Column('is_config_effectual', sa.BOOLEAN(), nullable=False),
    sa.Column('config_latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('config_flags', sa.Integer(), nullable=False),
    sa.Column('config_data', sa.String(), nullable=False),
    sa.Column('config_error', sa.String(), nullable=True),
    sa.Column('transfer_note_max_bytes', sa.Integer(), nullable=False),
    sa.CheckConstraint('(status_flags & 2) = 0 OR (status_flags & 1) != 0'),
    sa.CheckConstraint('actions_count >= 0'),
    sa.CheckConstraint('config_latest_update_id > 0'),
    sa.CheckConstraint('deactivated_at IS NULL OR (status_flags & 2) != 0'),
    sa.CheckConstraint('debtor_info_sha256 IS NULL OR octet_length(debtor_info_sha256) = 32')
    )
    op.create_index('idx_debtor_pk', 'debtor', ['debtor_id'], unique=True)
    op.create_table('finalize_transfer_signal',
    sa.Column('inserted_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('signal_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_request_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_note_format', sa.String(), nullable=False),
    sa.Column('transfer_note', sa.String(), nullable=False),
    sa.Column('committed_amount', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('committed_amount >= 0'),
    sa.PrimaryKeyConstraint('debtor_id', 'signal_id')
    )
    op.create_table('node_config',
    sa.Column('is_effective', sa.BOOLEAN(), nullable=False),
    sa.Column('min_debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('max_debtor_id', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('is_effective = true'),
    sa.CheckConstraint('min_debtor_id <= max_debtor_id'),
    sa.PrimaryKeyConstraint('is_effective'),
    comment='Represents the global node configuration (a singleton). The node is responsible only for debtor IDs that are within the interval [min_debtor_id, max_debtor_id].'
    )
    op.create_table('prepare_transfer_signal',
    sa.Column('inserted_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_request_id', sa.BigInteger(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('recipient', sa.String(), nullable=False),
    sa.Column('min_account_balance', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('amount >= 0'),
    sa.PrimaryKeyConstraint('debtor_id', 'coordinator_request_id')
    )
    op.create_table('running_transfer',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('recipient_uri', sa.String(), nullable=False),
    sa.Column('recipient', sa.String(), nullable=False),
    sa.Column('transfer_note_format', sa.String(), nullable=False),
    sa.Column('transfer_note', sa.String(), nullable=False),
    sa.Column('initiated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('finalized_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('error_code', sa.String(), nullable=True),
    sa.Column('total_locked_amount', sa.BigInteger(), nullable=True),
    sa.Column('coordinator_request_id', sa.BigInteger(), server_default=sa.text("nextval('coordinator_request_id_seq')"), nullable=False),
    sa.Column('transfer_id', sa.BigInteger(), nullable=True),
    sa.CheckConstraint('amount >= 0'),
    sa.CheckConstraint('error_code IS NULL OR finalized_at IS NOT NULL'),
    sa.CheckConstraint('total_locked_amount >= 0'),
    sa.ForeignKeyConstraint(['debtor_id'], ['debtor.debtor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('debtor_id', 'transfer_uuid'),
    comment='Represents an initiated issuing transfer. A new row is inserted when a debtor creates a new issuing transfer. The row is deleted when the debtor acknowledges (purges) the transfer.'
    )
    op.create_index('idx_coordinator_request_id', 'running_transfer', ['debtor_id', 'coordinator_request_id'], unique=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_coordinator_request_id', table_name='running_transfer')
    op.drop_table('running_transfer')
    op.drop_table('prepare_transfer_signal')
    op.drop_table('node_config')
    op.drop_table('finalize_transfer_signal')
    op.drop_index('idx_debtor_pk', table_name='debtor')
    op.drop_table('debtor')
    op.drop_table('configure_account_signal')
    # ### end Alembic commands ###
