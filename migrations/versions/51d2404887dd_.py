"""empty message

Revision ID: 51d2404887dd
Revises: 
Create Date: 2019-11-07 16:56:52.508379

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '51d2404887dd'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('account',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('change_seqnum', sa.Integer(), nullable=False, comment='Updated when a received `AccountChangeSignal` is applied.'),
    sa.Column('change_ts', sa.TIMESTAMP(timezone=True), nullable=False, comment='Updated when a received `AccountChangeSignal` is applied.'),
    sa.Column('principal', sa.BigInteger(), nullable=False, comment='The total owed amount. Can be negative.'),
    sa.Column('interest', sa.FLOAT(), nullable=False, comment='The amount of interest accumulated on the account before `change_ts`, but not added to the `principal` yet. Can be a negative number. `interest`gets zeroed and added to the principal once in a while (like once per week).'),
    sa.Column('interest_rate', sa.REAL(), nullable=False, comment='Annual rate (in percents) at which interest accumulates on the account.'),
    sa.Column('last_outgoing_transfer_date', sa.DATE(), nullable=True, comment='Updated on each transfer for which this account is the sender. This field is not updated on demurrage payments.'),
    sa.Column('status', sa.SmallInteger(), nullable=False, comment='Additional account status flags.'),
    sa.Column('interest_rate_last_change_seqnum', sa.Integer(), nullable=False, comment='Incremented (with wrapping) on each invocation of the `change_interest_rate` actor.'),
    sa.Column('interest_rate_last_change_ts', sa.TIMESTAMP(timezone=True), nullable=False, comment='Updated on every increment of `interest_rate_last_change_seqnum`. Must never decrease.'),
    sa.CheckConstraint('interest_rate > -100.0 AND interest_rate <= 100.0'),
    sa.CheckConstraint('principal > -9223372036854775808'),
    sa.PrimaryKeyConstraint('debtor_id', 'creditor_id'),
    comment='Tells who owes what to whom. This table is a replica of the table with the same name in the `swpt_accounts` service.'
    )
    op.create_table('change_interest_rate_signal',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('signal_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('change_seqnum', sa.Integer(), nullable=False),
    sa.Column('change_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('interest_rate', sa.REAL(), nullable=False),
    sa.PrimaryKeyConstraint('debtor_id', 'signal_id')
    )
    op.create_table('changed_debtor_info_signal',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('change_seqnum', sa.Integer(), nullable=False),
    sa.Column('change_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('status', sa.SmallInteger(), nullable=False),
    sa.Column('balance', sa.BigInteger(), nullable=True),
    sa.Column('interest_rate_target', sa.REAL(), nullable=False),
    sa.Column('bll_values', postgresql.ARRAY(sa.BigInteger(), dimensions=1), nullable=True),
    sa.Column('bll_cutoffs', postgresql.ARRAY(sa.DATE(), dimensions=1), nullable=True),
    sa.Column('irll_values', postgresql.ARRAY(sa.BigInteger(), dimensions=1), nullable=True),
    sa.Column('irll_cutoffs', postgresql.ARRAY(sa.DATE(), dimensions=1), nullable=True),
    sa.PrimaryKeyConstraint('debtor_id', 'change_seqnum')
    )
    op.create_table('debtor',
    sa.Column('debtor_id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('last_change_seqnum', sa.Integer(), nullable=False, comment='Incremented (with wrapping) on every change.'),
    sa.Column('last_change_ts', sa.TIMESTAMP(timezone=True), nullable=False, comment='Updated on every increment of `last_change_seqnum`. Must never decrease.'),
    sa.Column('status', sa.SmallInteger(), nullable=False, comment='Debtor status flags.'),
    sa.Column('balance', sa.BigInteger(), nullable=True, comment='The total issued amount with a negative sign. Normally, it will be a negative number or a zero. A positive value, although theoretically possible, should be very rare. A `NULL` means that the balance is unknown.'),
    sa.Column('balance_last_update_seqnum', sa.Integer(), nullable=True, comment='Updated on each change of the `balance`.'),
    sa.Column('balance_last_update_ts', sa.TIMESTAMP(timezone=True), nullable=True, comment='Updated on each change of the `balance`.'),
    sa.Column('interest_rate_target', sa.REAL(), nullable=False, comment="The desired annual rate (in percents) at which the interest should accumulate on creditors' accounts. The actual interest rate could be different if interest rate limits are enforced."),
    sa.Column('bll_values', postgresql.ARRAY(sa.BigInteger(), dimensions=1), nullable=True, comment='Enforced lower limits for the `balance` column. Each element in  this array should have a corresponding element in the `bll_cutoffs` arrays (the cutoff dates for the limits). A `NULL` is the same as an empty array.'),
    sa.Column('bll_cutoffs', postgresql.ARRAY(sa.DATE(), dimensions=1), nullable=True),
    sa.Column('irll_values', postgresql.ARRAY(sa.BigInteger(), dimensions=1), nullable=True, comment='Enforced interest rate lower limits. Each element in this array should have a corresponding element in the `irll_cutoffs` array (the cutoff dates for the limits). A `NULL` is the same as an empty array.'),
    sa.Column('irll_cutoffs', postgresql.ARRAY(sa.DATE(), dimensions=1), nullable=True),
    sa.CheckConstraint('bll_cutoffs IS NULL OR array_ndims(bll_cutoffs) = 1'),
    sa.CheckConstraint('bll_values IS NULL OR array_ndims(bll_values) = 1'),
    sa.CheckConstraint('interest_rate_target > -100.0 AND interest_rate_target <= 100.0'),
    sa.CheckConstraint('irll_cutoffs IS NULL OR array_ndims(irll_cutoffs) = 1'),
    sa.CheckConstraint('irll_values IS NULL OR array_ndims(irll_values) = 1'),
    sa.PrimaryKeyConstraint('debtor_id'),
    comment="Represents debtor's principal information."
    )
    op.create_table('interest_rate_concession',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('last_change_seqnum', sa.Integer(), nullable=False, comment='Incremented (with wrapping) on every change.'),
    sa.Column('last_change_ts', sa.TIMESTAMP(timezone=True), nullable=False, comment='Updated on every increment of `last_change_seqnum`. Must never decrease.'),
    sa.Column('irll_values', postgresql.ARRAY(sa.BigInteger(), dimensions=1), nullable=True, comment='Enforced concession interest rate lower limits. Each element in this array should have a corresponding element in the `irll_cutoffs` array (the cutoff dates for the limits). A `NULL` is the same as an empty array.'),
    sa.Column('irll_cutoffs', postgresql.ARRAY(sa.DATE(), dimensions=1), nullable=True),
    sa.Column('apl_values', postgresql.ARRAY(sa.BigInteger(), dimensions=1), nullable=True, comment="The concession interest rate will not be applied when the creditor's `account.principal` exceeds the values specified here. Each element in this array should have a corresponding element in the `apl_cutoffs` array (the cutoff dates for the limits). A `NULL` is the same as an empty array."),
    sa.Column('apl_cutoffs', postgresql.ARRAY(sa.DATE(), dimensions=1), nullable=True),
    sa.CheckConstraint('apl_cutoffs IS NULL OR array_ndims(apl_cutoffs) = 1'),
    sa.CheckConstraint('apl_values IS NULL OR array_ndims(apl_values) = 1'),
    sa.CheckConstraint('irll_cutoffs IS NULL OR array_ndims(irll_cutoffs) = 1'),
    sa.CheckConstraint('irll_values IS NULL OR array_ndims(irll_values) = 1'),
    sa.PrimaryKeyConstraint('debtor_id', 'creditor_id'),
    comment='Represents an enforced concession interest rate, valid only for a specific creditor, under specific conditions.'
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('interest_rate_concession')
    op.drop_table('debtor')
    op.drop_table('changed_debtor_info_signal')
    op.drop_table('change_interest_rate_signal')
    op.drop_table('account')
    # ### end Alembic commands ###
